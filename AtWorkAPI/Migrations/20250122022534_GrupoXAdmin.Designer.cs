// <auto-generated />
using System;
using AtWork.Domain.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AtWorkAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250122022534_GrupoXAdmin")]
    partial class GrupoXAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AtWork.Domain.Database.Entities.TB_Funcionario", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DT_Alt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_alt");

                    b.Property<DateTime>("DT_Cad")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_cad");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<Guid?>("ID_Grupo")
                        .HasColumnType("uuid")
                        .HasColumnName("id_grupo");

                    b.Property<Guid>("ID_Usuario")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("login");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.Property<string>("ST_Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("st_status");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("senha");

                    b.HasKey("ID");

                    b.HasIndex("ID_Grupo");

                    b.HasIndex("ID_Usuario");

                    b.ToTable("TB_Funcionario");
                });

            modelBuilder.Entity("AtWork.Domain.Database.Entities.TB_Grupo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DT_Alt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_alt");

                    b.Property<DateTime>("DT_Cad")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_cad");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.Property<string>("ST_Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("st_status");

                    b.HasKey("ID");

                    b.ToTable("tb_grupo");
                });

            modelBuilder.Entity("AtWork.Domain.Database.Entities.TB_Grupo_X_Admin", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DT_Alt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_alt");

                    b.Property<DateTime>("DT_Cad")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_cad");

                    b.Property<Guid>("ID_Grupo")
                        .HasColumnType("uuid")
                        .HasColumnName("id_grupo");

                    b.Property<Guid>("ID_Usuario")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.HasKey("ID");

                    b.HasIndex("ID_Grupo");

                    b.HasIndex("ID_Usuario");

                    b.ToTable("tb_grupo_x_admin");
                });

            modelBuilder.Entity("AtWork.Domain.Database.Entities.TB_Ponto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DT_Alt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_alt");

                    b.Property<DateTime>("DT_Cad")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_cad");

                    b.Property<DateTime>("DT_Ponto")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_ponto");

                    b.Property<Guid>("ID_Funcionario")
                        .HasColumnType("uuid")
                        .HasColumnName("id_funcionario");

                    b.Property<string>("ST_Ponto")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("st_ponto");

                    b.HasKey("ID");

                    b.HasIndex("ID_Funcionario");

                    b.ToTable("tb_ponto");
                });

            modelBuilder.Entity("AtWork.Domain.Database.Entities.TB_Usuario", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DT_Alt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_alt");

                    b.Property<DateTime>("DT_Cad")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_cad");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("login");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.Property<string>("ST_Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("st_status");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("senha");

                    b.HasKey("ID");

                    b.ToTable("tb_usuario");
                });

            modelBuilder.Entity("AtWork.Domain.Database.Entities.TB_Funcionario", b =>
                {
                    b.HasOne("AtWork.Domain.Database.Entities.TB_Grupo", "GrupoFK")
                        .WithMany()
                        .HasForeignKey("ID_Grupo");

                    b.HasOne("AtWork.Domain.Database.Entities.TB_Usuario", "UsuarioFK")
                        .WithMany()
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrupoFK");

                    b.Navigation("UsuarioFK");
                });

            modelBuilder.Entity("AtWork.Domain.Database.Entities.TB_Grupo_X_Admin", b =>
                {
                    b.HasOne("AtWork.Domain.Database.Entities.TB_Grupo", "GrupoFK")
                        .WithMany()
                        .HasForeignKey("ID_Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtWork.Domain.Database.Entities.TB_Usuario", "UsuarioFK")
                        .WithMany()
                        .HasForeignKey("ID_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrupoFK");

                    b.Navigation("UsuarioFK");
                });

            modelBuilder.Entity("AtWork.Domain.Database.Entities.TB_Ponto", b =>
                {
                    b.HasOne("AtWork.Domain.Database.Entities.TB_Funcionario", "FuncionarioFK")
                        .WithMany()
                        .HasForeignKey("ID_Funcionario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuncionarioFK");
                });
#pragma warning restore 612, 618
        }
    }
}
